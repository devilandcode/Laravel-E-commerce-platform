/*
 * DashBoard Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdvertsApi {
    private ApiClient localVarApiClient;

    public AdvertsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdvertsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for call33ae79d3d9e246defbb1b5069b53f1f0
     * @param advertId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call33ae79d3d9e246defbb1b5069b53f1f0Call(Integer advertId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adverts/{advertId}/favorite"
            .replaceAll("\\{" + "advertId" + "\\}", localVarApiClient.escapeString(advertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call33ae79d3d9e246defbb1b5069b53f1f0ValidateBeforeCall(Integer advertId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertId' is set
        if (advertId == null) {
            throw new ApiException("Missing the required parameter 'advertId' when calling call33ae79d3d9e246defbb1b5069b53f1f0(Async)");
        }
        

        okhttp3.Call localVarCall = call33ae79d3d9e246defbb1b5069b53f1f0Call(advertId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param advertId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public void call33ae79d3d9e246defbb1b5069b53f1f0(Integer advertId) throws ApiException {
        call33ae79d3d9e246defbb1b5069b53f1f0WithHttpInfo(advertId);
    }

    /**
     * 
     * 
     * @param advertId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call33ae79d3d9e246defbb1b5069b53f1f0WithHttpInfo(Integer advertId) throws ApiException {
        okhttp3.Call localVarCall = call33ae79d3d9e246defbb1b5069b53f1f0ValidateBeforeCall(advertId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param advertId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call33ae79d3d9e246defbb1b5069b53f1f0Async(Integer advertId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call33ae79d3d9e246defbb1b5069b53f1f0ValidateBeforeCall(advertId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call377309953d83da9bbb7e5ed16451f2c4
     * @param advertId ID of advert (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call377309953d83da9bbb7e5ed16451f2c4Call(Integer advertId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adverts/{advertId}"
            .replaceAll("\\{" + "advertId" + "\\}", localVarApiClient.escapeString(advertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call377309953d83da9bbb7e5ed16451f2c4ValidateBeforeCall(Integer advertId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertId' is set
        if (advertId == null) {
            throw new ApiException("Missing the required parameter 'advertId' when calling call377309953d83da9bbb7e5ed16451f2c4(Async)");
        }
        

        okhttp3.Call localVarCall = call377309953d83da9bbb7e5ed16451f2c4Call(advertId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param advertId ID of advert (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public void call377309953d83da9bbb7e5ed16451f2c4(Integer advertId) throws ApiException {
        call377309953d83da9bbb7e5ed16451f2c4WithHttpInfo(advertId);
    }

    /**
     * 
     * 
     * @param advertId ID of advert (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call377309953d83da9bbb7e5ed16451f2c4WithHttpInfo(Integer advertId) throws ApiException {
        okhttp3.Call localVarCall = call377309953d83da9bbb7e5ed16451f2c4ValidateBeforeCall(advertId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param advertId ID of advert (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call377309953d83da9bbb7e5ed16451f2c4Async(Integer advertId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call377309953d83da9bbb7e5ed16451f2c4ValidateBeforeCall(advertId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call533a1fbebde31664b7328a4ed8d841e1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call533a1fbebde31664b7328a4ed8d841e1Call(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adverts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call533a1fbebde31664b7328a4ed8d841e1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = call533a1fbebde31664b7328a4ed8d841e1Call(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public void call533a1fbebde31664b7328a4ed8d841e1() throws ApiException {
        call533a1fbebde31664b7328a4ed8d841e1WithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call533a1fbebde31664b7328a4ed8d841e1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = call533a1fbebde31664b7328a4ed8d841e1ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call533a1fbebde31664b7328a4ed8d841e1Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call533a1fbebde31664b7328a4ed8d841e1ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call7de8de179d2b71c0211055ff6d605ee2
     * @param advertId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call7de8de179d2b71c0211055ff6d605ee2Call(Integer advertId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adverts/{advertId}/favorite"
            .replaceAll("\\{" + "advertId" + "\\}", localVarApiClient.escapeString(advertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call7de8de179d2b71c0211055ff6d605ee2ValidateBeforeCall(Integer advertId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'advertId' is set
        if (advertId == null) {
            throw new ApiException("Missing the required parameter 'advertId' when calling call7de8de179d2b71c0211055ff6d605ee2(Async)");
        }
        

        okhttp3.Call localVarCall = call7de8de179d2b71c0211055ff6d605ee2Call(advertId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param advertId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public void call7de8de179d2b71c0211055ff6d605ee2(Integer advertId) throws ApiException {
        call7de8de179d2b71c0211055ff6d605ee2WithHttpInfo(advertId);
    }

    /**
     * 
     * 
     * @param advertId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call7de8de179d2b71c0211055ff6d605ee2WithHttpInfo(Integer advertId) throws ApiException {
        okhttp3.Call localVarCall = call7de8de179d2b71c0211055ff6d605ee2ValidateBeforeCall(advertId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param advertId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call7de8de179d2b71c0211055ff6d605ee2Async(Integer advertId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call7de8de179d2b71c0211055ff6d605ee2ValidateBeforeCall(advertId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
